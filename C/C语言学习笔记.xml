<?xml version="1.0" encoding="utf8"?>
<root>
	<item type="dict">
		<title type="str">画布 1</title>
		<topic type="dict">
			<title type="str">C语言学习笔记</title>
			<topics type="list">
				<item type="dict">
					<title type="str">调试</title>
					<topics type="list">
						<item type="dict">
							<title type="str">strace</title>
							<topics type="list">
								<item type="dict">
									<title type="str">可以追踪系统调用</title>
								</item>
							</topics>
						</item>
						<item type="dict">
							<title type="str">makefile</title>
							<topics type="list">
								<item type="dict">
									<title type="str">target: prerequire
Tab  command</title>
									<topics type="list">
										<item type="dict">
											<title type="str">如果target 不存在或者pre 比 target 更新就执行command</title>
										</item>
									</topics>
								</item>
								<item type="dict">
									<title type="str">可以根据.o: .c .h 来判断</title>
								</item>
								<item type="dict">
									<title type="str">gcc -o target .o</title>
									<topics type="list">
										<item type="dict">
											<title type="str">生成目标文件</title>
										</item>
									</topics>
								</item>
								<item type="dict">
									<title type="str">gcc -c  .c </title>
									<topics type="list">
										<item type="dict">
											<title type="str">编译生成.o</title>
										</item>
									</topics>
								</item>
								<item type="dict">
									<title type="str">编译是针对.c 的, .h 修改 需要重新编译.但是编译单元是.c</title>
								</item>
								<item type="dict">
									<title type="str">objects = main.o kbd.o command.o display.o \
    insert.o search.o files.o utils.o

edit : $(objects)
    cc -o edit $(objects)

main.o : defs.h
kbd.o : defs.h command.h
command.o : defs.h command.h
display.o : defs.h buffer.h
insert.o : defs.h buffer.h
search.o : defs.h buffer.h
files.o : defs.h buffer.h command.h
utils.o : defs.h

.PHONY : clean
clean :
    rm edit $(objects)</title>
									<topics type="list">
										<item type="dict">
											<title type="str">自动推导, 不需要管理gcc -c ,不需要声明.o 相同的.c 文件</title>
										</item>
										<item type="dict">
											<title type="str">声明objects 变量</title>
										</item>
									</topics>
								</item>
								<item type="dict">
									<title type="str">include 引入其他makefile</title>
									<topics type="list">
										<item type="dict">
											<title type="str">寻找顺序</title>
											<topics type="list">
												<item type="dict">
													<title type="str">如果make执行时，有 -I 或 --include-dir 参数，那么make就会在这个参数所指定的目 录下去寻找。</title>
												</item>
												<item type="dict">
													<title type="str">如果目录 &lt;prefix&gt;/include （一般是： /usr/local/bin 或 /usr/include ）存在的话，make也会去找</title>
												</item>
											</topics>
										</item>
									</topics>
								</item>
								<item type="dict">
									<title type="str">忽略失败 例如 -rm, -include</title>
								</item>
								<item type="dict">
									<title type="str">执行顺序</title>
									<topics type="list">
										<item type="dict">
											<title type="str">读入所有的Makefile。</title>
										</item>
										<item type="dict">
											<title type="str">读入被include的其它Makefile。</title>
										</item>
										<item type="dict">
											<title type="str">初始化文件中的变量。</title>
										</item>
										<item type="dict">
											<title type="str">推导隐晦规则，并分析所有规则。</title>
										</item>
										<item type="dict">
											<title type="str">为所有的目标文件创建依赖关系链。</title>
										</item>
										<item type="dict">
											<title type="str">根据依赖关系，决定哪些目标要重新生成。</title>
										</item>
										<item type="dict">
											<title type="str">执行生成命令。</title>
										</item>
									</topics>
								</item>
								<item type="dict">
									<title type="str">make 后边依序执行label</title>
									<topics type="list">
										<item type="dict">
											<title type="str">例如make clean hi (先执行clean 在执行hi)</title>
										</item>
										<item type="dict">
											<title type="str">最终的target 放到 最后</title>
										</item>
									</topics>
								</item>
								<item type="dict">
									<title type="str">第一个label 默认被执行,也就是make 不输入任何label .就会执行默认label</title>
								</item>
							</topics>
						</item>
					</topics>
				</item>
				<item type="dict">
					<title type="str">语言</title>
					<topics type="list">
						<item type="dict">
							<title type="str">左值右值</title>
							<topics type="list">
								<item type="dict">
									<title type="str">可以取地址的变量</title>
									<topics type="list">
										<item type="dict">
											<title type="str">左值中必定可以解析出对应对象的地址，除非该对象是位字段（bit-field）或者被声明为寄存器存储类</title>
										</item>
										<item type="dict">
											<title type="str">包括[], * 运算符都可以是左值</title>
											<topics type="list">
												<item type="dict">
													<title type="str">*左值可以保证修改该地址的值.</title>
												</item>
											</topics>
										</item>
									</topics>
								</item>
								<item type="dict">
									<title type="str">左值与右值的根本区别在于能否获取内存地址，而能否赋值不是区分的依据。通常临时量均为右值</title>
								</item>
								<item type="dict">
									<title type="str">左右值参考表</title>
								</item>
								<item type="dict">
									<title type="str">[Image]</title>
								</item>
							</topics>
						</item>
					</topics>
				</item>
				<item type="dict">
					<title type="str">测试</title>
				</item>
			</topics>
		</topic>
		<structure type="str">org.xmind.ui.map.unbalanced</structure>
	</item>
</root>
