<?xml version="1.0" encoding="utf8"?>
<root>
	<item type="dict">
		<title type="str">画布 1</title>
		<topic type="dict">
			<title type="str">spring 事务</title>
			<topics type="list">
				<item type="dict">
					<title type="str">淘气三千问</title>
					<topics type="list">
						<item type="dict">
							<title type="str">事务失效的 场景有哪些?</title>
						</item>
						<item type="dict">
							<title type="str">如何控制数据库和缓存的一致性. 保证事务回滚之后, 缓存可以及时清理?或者只有数据库成功, 缓存才会成功.</title>
							<makers type="list">
								<item type="str">task-done</item>
								<item type="str">flag-red</item>
							</makers>
							<topics type="list">
								<item type="dict">
									<title type="str">可以使用两个方法, 外层调用数据库事务方法,成功后再调用缓存更新,有没有更优雅的做法</title>
									<makers type="list">
										<item type="str">priority-1</item>
										<item type="str">task-done</item>
										<item type="str">flag-red</item>
									</makers>
								</item>
							</topics>
						</item>
						<item type="dict">
							<title type="str">为什么spring 建议事务注解应用于类上</title>
							<topics type="list">
								<item type="dict">
									<title type="str">因为当设置 proxy_target_class=true, 或者mode=aspectj 接口上的配置将会被忽略.</title>
								</item>
							</topics>
						</item>
					</topics>
				</item>
				<item type="dict">
					<title type="str">一些默认配置</title>
					<topics type="list">
						<item type="dict">
							<title type="str">proxy-target-class=&quot;false&quot;  </title>
						</item>
						<item type="dict">
							<title type="str">transactional 默认只会在RuntimeException 中 回滚,其他受检查异常会被忽略.</title>
						</item>
						<item type="dict">
							<title type="str">单一数据源会被默认配置事务管理器</title>
						</item>
					</topics>
				</item>
				<item type="dict">
					<title type="str">transaction 不生效的场景</title>
					<topics type="list">
						<item type="dict">
							<title type="str">表必须是 innodb</title>
						</item>
						<item type="dict">
							<title type="str">bean 被spring 托管</title>
						</item>
						<item type="dict">
							<title type="str">Public 方法</title>
						</item>
						<item type="dict">
							<title type="str">EnableTransactionManagement &amp;&amp; transactional 注解</title>
						</item>
						<item type="dict">
							<title type="str">是否是自调用.即被调用的方法是注解方法, 但是调用者是同一个对象的其他方法.</title>
						</item>
						<item type="dict">
							<title type="str">所用数据源是否加载了事务管理器</title>
							<topics type="list">
								<item type="dict">
									<title type="str">在SpringBoot项目中，如果是单数据源，那么系统会默认为单数据源配置事务管理器DataSourceTransactionManager。</title>
								</item>
								<item type="dict">
									<title type="str">在SpringBoot项目中，如果是多数据源，则一定确保所有的数据源都配置了事务管理器。</title>
								</item>
								<item type="dict">
									<title type="str">在transactional中配置事务管理器,使用相关的bean</title>
								</item>
							</topics>
						</item>
						<item type="dict">
							<title type="str">Transactional的扩展配置propagation是否正确</title>
							<topics type="list">
								<item type="dict">
									<title type="str">以下 propagation属性会导致事务不会触发</title>
								</item>
								<item type="dict">
									<title type="str">SUPPORTS: 如果存在事务，则进入事务；否则，以非事务方式运行。</title>
								</item>
								<item type="dict">
									<title type="str">NOT_SUPPORTED: 如果存在事务，则挂起事务，并以非事务方式运行。</title>
								</item>
								<item type="dict">
									<title type="str">NEVER: 以非事务形式运行，如果存在事务，则抛出异常。</title>
								</item>
							</topics>
						</item>
						<item type="dict">
							<title type="str">可选配置</title>
							<topics type="list">
								<item type="dict">
									<title type="str">Springboot配置文件的rollback-on-commit-failure属性：

# yaml配置
spring:
  transaction:
    rollback-on-commit-failure: true</title>
								</item>
							</topics>
						</item>
					</topics>
				</item>
				<item type="dict">
					<title type="str">坑点</title>
					<topics type="list">
						<item type="dict">
							<title type="str">多数据源情况下没有显示配置事务管理器, 事务一直不生效</title>
						</item>
						<item type="dict">
							<title type="str">事务处理中, 在读写的事务中, 读操作使用读库的数据源 ,导致读不到数据. </title>
							<topics type="list">
								<item type="dict">
									<title type="str">如何根据事务或者其他机制自动的切换读写数据源</title>
								</item>
							</topics>
						</item>
					</topics>
				</item>
				<item type="dict">
					<title type="str">事务处理大致流程</title>
					<topics type="list">
						<item type="dict">
							<title type="str">当@Transactional注解的方法被类外部的代码调用时，Spring在运行时为方法所在类生成一个AOP代理对象。
代理对象根据@Transactional的属性，决定是否由事务拦截器TransactionInterceptor对此方法进行事务拦截。
在进行事务拦截时，会先开启事务，然后执行业务代码，根据执行是否出现异常，通过抽象事务管理器AbstractPlatformTransactionManager来进行rollback或者commit。</title>
						</item>
						<item type="dict">
							<title type="str">在事务进行 commit 前后 有额外的扩展点</title>
							<topics type="list">
								<item type="dict">
									<title type="str">TransactionSynchronization 事务同步接口 有before commit , after commit , afterComplete(无论成功还是失败都会调用.)</title>
								</item>
								<item type="dict">
									<title type="str">例如缓村的使用接口</title>
									<topics type="list">
										<item type="dict">
											<title type="str"> if (TransactionSynchronizationManager.isSynchronizationActive()) {
            TransactionSynchronizationManager.registerSynchronization(new TransactionSynchronizationAdapter() {
                public void afterCommit() {
                    TransactionAwareCacheDecorator.this.targetCache.put(key, value);
                }
            });
        } else {
            this.targetCache.put(key, value);
        }</title>
										</item>
									</topics>
								</item>
							</topics>
						</item>
					</topics>
				</item>
				<item type="dict">
					<title type="str">transactional 注解</title>
					<topics type="list">
						<item type="dict">
							<title type="str">子主题 1</title>
						</item>
						<item type="dict">
							<title type="str">设置事务 的隔离级别</title>
							<topics type="list">
								<item type="dict">
									<title type="str">Transactional (isolation=Isolation.READ_COMMITTED)</title>
								</item>
								<item type="dict">
									<title type="str">默认使用数据库的隔离级别</title>
								</item>
								<item type="dict">
									<title type="str">其他隔离级别</title>
									<topics type="list">
										<item type="dict">
											<title type="str">READ_COMMITTED</title>
										</item>
										<item type="dict">
											<title type="str">READ_UNCOMMITTED</title>
										</item>
										<item type="dict">
											<title type="str">REPEATABLE_READ</title>
										</item>
										<item type="dict">
											<title type="str">SERIALIZABLE</title>
										</item>
									</topics>
								</item>
							</topics>
						</item>
					</topics>
				</item>
				<item type="dict">
					<title type="str">transactionManager</title>
					<topics type="list">
						<item type="dict">
							<title type="str">[Image]</title>
						</item>
						<item type="dict">
							<title type="str">spring 提供了在各个持久层框架的之上抽象的事务管理器, 不同的持久层框架的事务管理的实现不同但是接口相同</title>
						</item>
						<item type="dict">
							<title type="str">jpa</title>
							<topics type="list">
								<item type="dict">
									<title type="str">JpaTransactionManager</title>
								</item>
							</topics>
						</item>
						<item type="dict">
							<title type="str">jdbc</title>
							<topics type="list">
								<item type="dict">
									<title type="str">DataSourceTransactionManager</title>
									<topics type="list">
										<item type="dict">
											<title type="str">只需要data source</title>
										</item>
									</topics>
								</item>
							</topics>
						</item>
						<item type="dict">
							<title type="str">hibernate</title>
							<topics type="list">
								<item type="dict">
									<title type="str">HibernateTransactionManager</title>
									<topics type="list">
										<item type="dict">
											<title type="str">需要 EntityManagerFactory 及 dataSource</title>
										</item>
									</topics>
								</item>
							</topics>
						</item>
						<item type="dict">
							<title type="str">jta</title>
							<topics type="list">
								<item type="dict">
									<title type="str">JtaTransactionManager</title>
								</item>
							</topics>
						</item>
						<item type="dict">
							<title type="str">jms</title>
							<topics type="list">
								<item type="dict">
									<title type="str">JmsTransactionManager</title>
								</item>
							</topics>
						</item>
					</topics>
				</item>
			</topics>
		</topic>
		<structure type="str">org.xmind.ui.map.unbalanced</structure>
	</item>
</root>
