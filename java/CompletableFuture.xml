<?xml version="1.0" encoding="utf8"?>
<root>
	<item type="dict">
		<title type="str">画布 1</title>
		<topic type="dict">
			<title type="str">CompletableFuture</title>
			<topics type="list">
				<item type="dict">
					<title type="str">anyOf 接受一组CompleteableFuture,只要有一个返回,该Future 即返回</title>
				</item>
				<item type="dict">
					<title type="str">allOf 接受一组CF, 等所有的 Future返回,任务结束</title>
				</item>
				<item type="dict">
					<title type="str">Task 协同</title>
					<topics type="list">
						<item type="dict">
							<title type="str">并行最后合并结果</title>
							<topics type="list">
								<item type="dict">
									<title type="str">thenCombine</title>
								</item>
							</topics>
						</item>
						<item type="dict">
							<title type="str">任务前后依赖</title>
							<topics type="list">
								<item type="dict">
									<title type="str">thenCompose</title>
								</item>
							</topics>
						</item>
						<item type="dict">
							<title type="str">任务完成时后置执行某任务</title>
							<topics type="list">
								<item type="dict">
									<title type="str">thenAccept</title>
								</item>
								<item type="dict">
									<title type="str">可接受之前future 的参数</title>
								</item>
							</topics>
						</item>
						<item type="dict">
							<title type="str">either方法一般接受一个future, 哪一个future 先准备好,就使用哪个 Future的返回值</title>
						</item>
						<item type="dict">
							<title type="str">supplyAsync</title>
							<topics type="list">
								<item type="dict">
									<title type="str">异步执行一个 Task, 返回的 Future保存 task的执行结果</title>
								</item>
							</topics>
						</item>
					</topics>
				</item>
				<item type="dict">
					<title type="str">使用顺序</title>
					<topics type="list">
						<item type="dict">
							<title type="str">任务的协同关系生成 allof, thenCombine,threnCompose</title>
						</item>
						<item type="dict">
							<title type="str">thenApply对任务的结果再次处理生成新的结果, exceptionally负责异常处理</title>
						</item>
						<item type="dict">
							<title type="str">对任务的结果进行处理,但是不生成新的结果</title>
						</item>
						<item type="dict">
							<title type="str">对结果不关系,也不输出结果</title>
						</item>
						<item type="dict">
							<title type="str">thenComplete最终结束</title>
						</item>
						<item type="dict">
							<title type="str">没个过程都可以异步</title>
						</item>
					</topics>
				</item>
				<item type="dict">
					<title type="str">名词定义</title>
					<topics type="list">
						<item type="dict">
							<title type="str">定义要执行的操作为任务,需要异步执行,则为异步任务</title>
						</item>
						<item type="dict">
							<title type="str">任务生产者指提交任务的生产者线程, 执行任务的线程称为消费者线程,而 任务执行完成的后置任务执行,称为后置消费者</title>
						</item>
					</topics>
				</item>
				<item type="dict">
					<title type="str">future 模式的思考</title>
					<topics type="list">
						<item type="dict">
							<title type="str">拿一个例子作为切入点</title>
						</item>
					</topics>
				</item>
				<item type="dict">
					<title type="str">示例主题</title>
					<topics type="list">
						<item type="dict">
							<title type="str">云计算业务中,管理节点需要管理众多物理机,假设读者接到一个需求,要求一次性下发一个配置文件到1000台物理机.要求同时成功,如果一个失败,立即回滚掉.下发成功后,给物理机下发另一个命令, 同时有时间的限制</title>
						</item>
						<item type="dict">
							<title type="str">有单独的消费者线程 去负责发送请求.生产者线程在提交完请求就去做其他的事情了,但是他可以拿到实际的future</title>
						</item>
					</topics>
				</item>
			</topics>
		</topic>
		<structure type="str">org.xmind.ui.map.unbalanced</structure>
	</item>
</root>
