<?xml version="1.0" encoding="utf8"?>
<root>
	<item type="dict">
		<title type="str">画布 1</title>
		<topic type="dict">
			<title type="str">网络编程 socket </title>
			<topics type="list">
				<item type="dict">
					<title type="str">淘气三千问</title>
					<topics type="list">
						<item type="dict">
							<title type="str">localhost, 127.0.0.1, 0.0.0.0  的区别</title>
						</item>
						<item type="dict">
							<title type="str">如何进行udp socket编程</title>
						</item>
						<item type="dict">
							<title type="str">tomcat 如果本机多个ip,如何监听.</title>
							<topics type="list">
								<item type="dict">
									<title type="str">INADDR_ANY</title>
									<topics type="list">
										<item type="dict">
											<title type="str">指定监听这个, 就会同时监听本地所有网卡,所有IP.</title>
										</item>
									</topics>
								</item>
							</topics>
						</item>
						<item type="dict">
							<title type="str">如何优雅关闭socket</title>
						</item>
						<item type="dict">
							<title type="str">socket 客户端发送 数据, 如何选择ip 或者网卡? 同一个网桥下,能否被分配两个ip</title>
							<topics type="list">
								<item type="dict">
									<title type="str">可以通过虚拟网卡分配其他ip, mac地址也不同.</title>
								</item>
								<item type="dict">
									<title type="str">客户端发送数据时, 操作系统会根据本地路由表 选择目的地址对应的源ip是谁.</title>
								</item>
							</topics>
						</item>
						<item type="dict">
							<title type="str">什么是backlog</title>
						</item>
						<item type="dict">
							<title type="str">客户端连接服务端出现connection refused. 和socket函数有啥关系</title>
							<topics type="list">
								<item type="dict">
									<title type="str">如果没有进程在该端口上调用listen 监听该端口. 就会出现refused</title>
								</item>
							</topics>
						</item>
						<item type="dict">
							<title type="str">客户端连接出现connection timeout</title>
							<topics type="list">
								<item type="dict">
									<title type="str">已经listen了,但是没有及时accept</title>
								</item>
							</topics>
						</item>
					</topics>
				</item>
				<item type="dict">
					<title type="str">套接字编程基础</title>
					<topics type="list">
						<item type="dict">
							<title type="str">服务端网络编程模型</title>
							<topics type="list">
								<item type="dict">
									<title type="str">tcp调用顺序</title>
									<topics type="list">
										<item type="dict">
											<title type="str">int socket(int domain, int type, protocol)</title>
											<topics type="list">
												<item type="dict">
													<title type="str">指定socket的协议. (可创建tcp, udp等)</title>
												</item>
											</topics>
										</item>
										<item type="dict">
											<title type="str">int bind(int socketfd, struct sockaddr *  addr, socklen_t addrlen);</title>
											<topics type="list">
												<item type="dict">
													<title type="str">addr, 用来作为输入参数, 提供服务端绑定的地址.端口</title>
												</item>
											</topics>
										</item>
										<item type="dict">
											<title type="str">listen(int sockfd, int backlog);</title>
											<topics type="list">
												<item type="dict">
													<title type="str">指定tcp连接的backlog</title>
												</item>
											</topics>
										</item>
										<item type="dict">
											<title type="str">int accept(int sockfd, struct sockaddr * addr, socklen_t * addrlen);</title>
											<topics type="list">
												<item type="dict">
													<title type="str">addr 作为输出参数, 输出客户端地址信息</title>
												</item>
											</topics>
										</item>
									</topics>
								</item>
							</topics>
						</item>
						<item type="dict">
							<title type="str">客户端编程模型</title>
							<topics type="list">
								<item type="dict">
									<title type="str">调用顺序</title>
									<topics type="list">
										<item type="dict">
											<title type="str">int connect(int sockfd, struct sockaddr * addr, socklen_t addrlen);</title>
										</item>
									</topics>
								</item>
							</topics>
						</item>
						<item type="dict">
							<title type="str">常见流程</title>
							<topics type="list">
								<item type="dict">
									<title type="str">服务端建立监听 监听请求. </title>
								</item>
								<item type="dict">
									<title type="str">客户端申请连接</title>
								</item>
								<item type="dict">
									<title type="str">收发数据.</title>
								</item>
								<item type="dict">
									<title type="str">应用层沟通 何时关闭(接收到关闭报文)</title>
								</item>
								<item type="dict">
									<title type="str">双方close</title>
								</item>
							</topics>
						</item>
						<item type="dict">
							<title type="str">协议及套接字类型</title>
							<topics type="list">
								<item type="dict">
									<title type="str">socket 中domain, type, protocol</title>
									<topics type="list">
										<item type="dict">
											<title type="str">domain 指定ip层通讯使用的 协议族. 可选有 PF_INET(IPv4协议), PF_INET6,PF_IPX, PF_PACKET (底层套接字协议族)</title>
										</item>
										<item type="dict">
											<title type="str">套接字type</title>
											<topics type="list">
												<item type="dict">
													<title type="str">套接字的传输方式.</title>
												</item>
												<item type="dict">
													<title type="str">面向连接套接字类型</title>
													<topics type="list">
														<item type="dict">
															<title type="str">SOCK_STREAM</title>
														</item>
														<item type="dict">
															<title type="str">当前只存在tcp一种, 如果基于流, 可能会有tcp的替代方案</title>
														</item>
													</topics>
												</item>
												<item type="dict">
													<title type="str">面向消息的套接字</title>
													<topics type="list">
														<item type="dict">
															<title type="str">SOCK_DGRAM</title>
														</item>
														<item type="dict">
															<title type="str">只有udp一种. </title>
														</item>
													</topics>
												</item>
												<item type="dict">
													<title type="str">面向消息和连接的区别</title>
													<topics type="list">
														<item type="dict">
															<title type="str">客户端和服务端 在对待流时, 是需要维护连接状态的.</title>
														</item>
														<item type="dict">
															<title type="str">流是没有分割点的, 读取方可以不停读取, 需要自己分割 流.</title>
														</item>
														<item type="dict">
															<title type="str">面向连接在传输时, 能保证消息不丢, 不重复, 有序.</title>
														</item>
													</topics>
												</item>
											</topics>
										</item>
										<item type="dict">
											<title type="str">protocol </title>
											<topics type="list">
												<item type="dict">
													<title type="str">OPPROTO_TCP</title>
												</item>
												<item type="dict">
													<title type="str">OPPROTO_UDP</title>
												</item>
											</topics>
										</item>
										<item type="dict">
											<title type="str">这三个参数是相互关联的, 例如type选定后, protocol就需要设置匹配的协议. </title>
										</item>
									</topics>
								</item>
							</topics>
						</item>
					</topics>
				</item>
			</topics>
		</topic>
		<structure type="str">org.xmind.ui.map.unbalanced</structure>
	</item>
</root>
