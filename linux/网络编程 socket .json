[
  {
    "title": "画布 1",
    "topic": {
      "title": "网络编程 socket ",
      "topics": [
        {
          "title": "淘气三千问",
          "topics": [
            {
              "title": "localhost, 127.0.0.1, 0.0.0.0  的区别",
              "topics": [
                {
                  "title": "0.0.0.0 不能ping通，代表本机所有的IP地址",
                  "topics": [
                    {
                      "title": "如果监听0.0.0.0 无论是通过127.0.0.1 & 10.1.xxx.xxx都可以访问该socket"
                    },
                    {
                      "title": "等同于IP_ADDR_ANY"
                    }
                  ]
                },
                {
                  "title": "示例区别",
                  "topics": [
                    {
                      "title": "0.0.0.0:9999 外部可以通过本机ip访问，这种方式最是保险 "
                    },
                    {
                      "title": "192.168.0.105:9999 外部可以通过这个ip访问9999 "
                    },
                    {
                      "title": "127.0.0.1：9999这种方式外部访问不了，本机可以访问"
                    }
                  ]
                }
              ]
            },
            {
              "title": "如何进行udp socket编程"
            },
            {
              "title": "tomcat 如果本机多个ip,如何监听.",
              "topics": [
                {
                  "title": "INADDR_ANY",
                  "topics": [
                    {
                      "title": "指定监听这个, 就会同时监听本地所有网卡,所有IP."
                    }
                  ]
                }
              ]
            },
            {
              "title": "如何优雅关闭socket"
            },
            {
              "title": "socket 客户端发送 数据, 如何选择ip 或者网卡? 同一个网桥下,能否被分配两个ip",
              "topics": [
                {
                  "title": "可以通过虚拟网卡分配其他ip, mac地址也不同."
                },
                {
                  "title": "客户端发送数据时, 操作系统会根据本地路由表 选择目的地址对应的源ip是谁."
                }
              ]
            },
            {
              "title": "什么是backlog"
            },
            {
              "title": "客户端连接服务端出现connection refused. 和socket函数有啥关系",
              "topics": [
                {
                  "title": "如果没有进程在该端口上调用listen 监听该端口. 就会出现refused"
                }
              ]
            },
            {
              "title": "客户端连接出现connection timeout",
              "topics": [
                {
                  "title": "已经listen了,但是没有及时accept"
                }
              ]
            },
            {
              "title": "listen 和bind的区别 .",
              "topics": [
                {
                  "title": "listen",
                  "topics": [
                    {
                      "title": "创建半连接队列的实例，初始化全连接队列。"
                    },
                    {
                      "title": "初始化sock的一些变量，把它的状态设为TCP_LISTEN。"
                    },
                    {
                      "title": "检查端口是否可用，防止bind()后其它进程修改了端口信息。"
                    },
                    {
                      "title": "把sock链接进入监听哈希表listening_hash中"
                    }
                  ]
                },
                {
                  "title": "bind",
                  "topics": [
                    {
                      "title": "该调用通过传递进来的文件描述符找到对应的socket, 结构，然后通过socket访问sock结构。操作sock进行地址的绑定。如果指定了端口检查端口的可用性并绑定，否则随机分配一个端口进行绑定"
                    }
                  ]
                },
                {
                  "title": "udp的服务端 只需要bind,不需要listen"
                }
              ]
            }
          ]
        },
        {
          "title": "TCP  套接字编程基础",
          "topics": [
            {
              "title": "服务端网络编程模型",
              "topics": [
                {
                  "title": "tcp调用顺序",
                  "topics": [
                    {
                      "title": "int socket(int domain, int type, protocol)",
                      "topics": [
                        {
                          "title": "指定socket的协议. (可创建tcp, udp等)"
                        }
                      ]
                    },
                    {
                      "title": "int bind(int socketfd, struct sockaddr *  addr, socklen_t addrlen);",
                      "topics": [
                        {
                          "title": "addr, 用来作为输入参数, 提供服务端绑定的地址.端口"
                        }
                      ]
                    },
                    {
                      "title": "listen(int sockfd, int backlog);",
                      "topics": [
                        {
                          "title": "指定tcp连接的backlog"
                        },
                        {
                          "title": "backlog 指定的是处于Established状态的tcp连接的个数.而不是处于syn状态的tcp连接. syn和establish两个状态分别在两个队列, 此backlog 是establish状态的连接的队列长度. "
                        },
                        {
                          "title": "SYN RECEIVED队列长度 由linux系统参数指定. 不能针对一个socket 设置. ",
                          "topics": [
                            {
                              "title": "/proc/sys/net/ipv4/tcp_max_syn_backlog 默认值128"
                            }
                          ]
                        },
                        {
                          "title": "accept只是从establish状态的队列取出连接."
                        },
                        {
                          "title": "如果accept队列满了, 不会再将其他连接置为establish状态, 即使该连接已经接收到sync ack. (此时客户端认为已经建立成功,就会出现read timeout.客户端认为连接已经建立,所以不会是connect timeout)",
                          "makers": [
                            "priority-1",
                            "task-done",
                            "flag-red"
                          ]
                        },
                        {
                          "title": "https://blog.csdn.net/yangbodong22011/article/details/60399728"
                        }
                      ]
                    },
                    {
                      "title": "int accept(int sockfd, struct sockaddr * addr, socklen_t * addrlen);",
                      "topics": [
                        {
                          "title": "addr 作为输出参数, 输出客户端地址信息"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "title": "客户端编程模型",
              "topics": [
                {
                  "title": "调用顺序",
                  "topics": [
                    {
                      "title": "int connect(int sockfd, struct sockaddr * addr, socklen_t addrlen);",
                      "topics": [
                        {
                          "title": "connect在三次握手后 返回, 也就是服务端已经收到ack了.
进入establish, 或者即将进入establish.",
                          "topics": [
                            {
                              "title": "可能 backlog满了,这样已经收到ack的无法进入establish队列"
                            }
                          ]
                        },
                        {
                          "title": "客户端地址何时分配, 如何分配",
                          "topics": [
                            {
                              "title": "发送方本地有路由表 标识每个网卡的下一跳路由地址. 通过子网掩码得出下一跳地址."
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "title": "常见流程",
              "topics": [
                {
                  "title": "服务端建立监听 监听请求. "
                },
                {
                  "title": "客户端申请连接"
                },
                {
                  "title": "收发数据."
                },
                {
                  "title": "应用层沟通 何时关闭(接收到关闭报文)"
                },
                {
                  "title": "双方close"
                }
              ]
            },
            {
              "title": "协议及套接字类型",
              "topics": [
                {
                  "title": "socket 中domain, type, protocol",
                  "topics": [
                    {
                      "title": "domain 指定ip层通讯使用的 协议族. 可选有 PF_INET(IPv4协议), PF_INET6,PF_IPX, PF_PACKET (底层套接字协议族)"
                    },
                    {
                      "title": "套接字type",
                      "topics": [
                        {
                          "title": "套接字的传输方式."
                        },
                        {
                          "title": "面向连接套接字类型",
                          "topics": [
                            {
                              "title": "SOCK_STREAM"
                            },
                            {
                              "title": "当前只存在tcp一种, 如果基于流, 可能会有tcp的替代方案"
                            }
                          ]
                        },
                        {
                          "title": "面向消息的套接字",
                          "topics": [
                            {
                              "title": "SOCK_DGRAM"
                            },
                            {
                              "title": "只有udp一种. "
                            }
                          ]
                        },
                        {
                          "title": "面向消息和连接的区别",
                          "topics": [
                            {
                              "title": "客户端和服务端 在对待流时, 是需要维护连接状态的."
                            },
                            {
                              "title": "流是没有分割点的, 读取方可以不停读取, 需要自己分割 流."
                            },
                            {
                              "title": "面向连接在传输时, 能保证消息不丢, 不重复, 有序."
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "title": "protocol ",
                      "topics": [
                        {
                          "title": "OPPROTO_TCP"
                        },
                        {
                          "title": "OPPROTO_UDP"
                        }
                      ]
                    },
                    {
                      "title": "这三个参数是相互关联的, 例如type选定后, protocol就需要设置匹配的协议. "
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "title": "udp编程",
          "topics": [
            {
              "title": "bind",
              "topics": [
                {
                  "title": "客户端和服务端都需要bind . 只要需要recv数据都需要bind, 指定socket 从哪个ip, 端口接受数据"
                }
              ]
            },
            {
              "title": "connect",
              "topics": [
                {
                  "title": "connect是可选项, 因为sentto可以指定目的ip, 端口 .所以一般不需要connect指定目标ip, port.
但是sentto中默认了一个绑定目标IP,port的行为, 如果使用connect 可以指定绑定. 当长时间和某一个目的ip,端口通讯时可以使用connect优化这个问题"
                },
                {
                  "title": "和tcp中的connect的区别",
                  "topics": [
                    {
                      "title": "tcp中的connect会三次握手, 而udp的connect只会注册socket到目标ip,port. "
                    },
                    {
                      "title": "udp connect后, 可以使用write写socket, 而不用sendto指定ip,port"
                    }
                  ]
                }
              ]
            },
            {
              "title": "如何获取对端的ip,port",
              "topics": [
                {
                  "title": "recv的时候,可获取对方的ip,port"
                }
              ]
            },
            {
              "title": "udp",
              "topics": [
                {
                  "title": "是有边界的消息服务, 即对方sendto的次数和recv的次数完全相同."
                },
                {
                  "title": "不存在像tcp那样, 流数据, 没有边界, 需要客户端自己定义边界."
                }
              ]
            },
            {
              "title": "适合使用udp的服务",
              "topics": [
                {
                  "title": "dns"
                },
                {
                  "title": "视频服务等",
                  "topics": [
                    {
                      "title": "丢失几帧数据不影响"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    "structure": "org.xmind.ui.map.unbalanced"
  }
]