<?xml version="1.0" encoding="utf8"?>
<root>
	<item type="dict">
		<title type="str">画布 1</title>
		<topic type="dict">
			<title type="str">通用技巧</title>
			<topics type="list">
				<item type="dict">
					<title type="str">时间环设计</title>
				</item>
				<item type="dict">
					<title type="str">幂等</title>
					<topics type="list">
						<item type="dict">
							<title type="str">原则</title>
							<topics type="list">
								<item type="dict">
									<title type="str">任意多次执行所产生的影响均与一次执行的影响相同</title>
								</item>
							</topics>
						</item>
						<item type="dict">
							<title type="str">删除幂等.保证删除的语义正确.(我不希望这条记录存在. 处理结果可以返回成功,但是内部错误码可以特殊标识)</title>
						</item>
						<item type="dict">
							<title type="str">新增操作</title>
							<topics type="list">
								<item type="dict">
									<title type="str">修改新增操作 为了实现幂等.如何校验是否发生了冲突,或者如何防止冲突
分别采用以下方法校验</title>
									<note type="str">以下的前提说明</note>
									<makers type="list">
										<item type="str">symbol-question</item>
										<item type="str">flag-red</item>
									</makers>
									<labels type="list">
										<item type="str">以下的前提说明</item>
									</labels>
								</item>
								<item type="dict">
									<title type="str">唯一索引，防止新增脏数据 ,当出现失败时,查询一次,如果存在,那么直接返回新增成功即可.</title>
								</item>
								<item type="dict">
									<title type="str">token机制，防止页面重复提交</title>
									<topics type="list">
										<item type="dict">
											<title type="str">由于重复点击或者网络重发，或者nginx重发等情况会导致数据被重复提交  </title>
										</item>
										<item type="dict">
											<title type="str">采用token加redis</title>
											<topics type="list">
												<item type="dict">
													<title type="str">1. 数据提交前要向服务的申请token，token放到redis或jvm内存，token有效时间  </title>
												</item>
												<item type="dict">
													<title type="str">2. 提交后后台校验token，同时删除token，生成新的token返回 </title>
												</item>
												<item type="dict">
													<title type="str">redis要用删除操作来判断token，删除成功代表token校验通过，
如果用select+delete来校验token，存在并发问题，不建议使用 </title>
												</item>
											</topics>
										</item>
									</topics>
								</item>
								<item type="dict">
									<title type="str">悲观锁 </title>
									<topics type="list">
										<item type="dict">
											<title type="str">悲观锁使用时一般伴随事务一起使用，数据锁定时间可能会很长，根据实际情况选用 </title>
										</item>
										<item type="dict">
											<title type="str">select for update</title>
										</item>
									</topics>
								</item>
								<item type="dict">
									<title type="str">乐观锁</title>
									<topics type="list">
										<item type="dict">
											<title type="str">乐观锁只是在更新数据那一刻锁表，其他时间不锁表，所以相对于悲观锁，效率更高。 </title>
										</item>
										<item type="dict">
											<title type="str">1. 通过版本号实现  </title>
											<topics type="list">
												<item type="dict">
													<title type="str">更新事务之前的业务逻辑,要首先查询出来,当前记录的版本.然后修改保存,如果不符合,说明出现并发问题</title>
												</item>
											</topics>
										</item>
										<item type="dict">
											<title type="str">2. 通过条件限制  </title>
										</item>
									</topics>
								</item>
								<item type="dict">
									<title type="str">状态机幂等</title>
									<topics type="list">
										<item type="dict">
											<title type="str">在设计单据相关的业务，或者是任务相关的业务，肯定会涉及到状态机(状态变更图)，就是业务单据上面有个状态，状态在不同的情况下会发生变更，一般情况下存在有限状态机，这时候，如果状态机已经处于下一个状态，
这时候来了一个上一个状态的变更，理论上是不能够变更的，这样的话，保证了有限状态机的幂等</title>
										</item>
										<item type="dict">
											<title type="str">实际上 乐观锁也可以是状态机幂等的实现之一, 一般的版本号是递增的,而状态机是有限的几个状态,实际设计时
可以两者兼而考虑</title>
										</item>
									</topics>
								</item>
								<item type="dict">
									<title type="str">. 对外提供接口的api如何保证幂等  </title>
									<topics type="list">
										<item type="dict">
											<title type="str">如银联提供的付款接口：需要接入商户提交付款请求时附带：source来源，seq序列号  
source+seq在数据库里面做唯一索引，防止多次付款，(并发时，只能处理一个请求) </title>
										</item>
										<item type="dict">
											<title type="str">实际上还是使用唯一标识来做幂等,这时分布式全局ID生成显得至关重要</title>
										</item>
									</topics>
								</item>
							</topics>
						</item>
						<item type="dict">
							<title type="str">实际的幂等实现时, 对于一致性要就非常高的场景,并发量不大的场景,可以考虑使用分布式锁,对整个资源锁住
然后执行后续的业务逻辑判断和处理</title>
						</item>
					</topics>
				</item>
				<item type="dict">
					<title type="str">缓存一致性问题</title>
					<topics type="list">
						<item type="dict">
							<title type="str">先更新数据库,再删除缓存</title>
							<topics type="list">
								<item type="dict">
									<title type="str">（1）缓存刚好失效
（2）请求A查询数据库，得一个旧值
（3）请求B将新值写入数据库
（4）请求B删除缓存
（5）请求A将查到的旧值写入缓存</title>
									<topics type="list">
										<item type="dict">
											<title type="str">以上会发生脏数据</title>
										</item>
									</topics>
								</item>
								<item type="dict">
									<title type="str">但是只有2,3中 3比2 快, B才会发生先删除缓存,A 用旧值写缓存</title>
								</item>
								<item type="dict">
									<title type="str">实际上 写库操作远远低于读操作,所以避免慢 SQL.</title>
								</item>
							</topics>
						</item>
						<item type="dict">
							<title type="str">先删缓存再写数据库</title>
							<topics type="list">
								<item type="dict">
									<title type="str">（1）先淘汰缓存
（2）再写数据库（这两步和原来一样）
（3）休眠1秒，再次淘汰缓存</title>
								</item>
								<item type="dict">
									<title type="str">使用异步双删除</title>
								</item>
							</topics>
						</item>
					</topics>
				</item>
			</topics>
		</topic>
		<structure type="str">org.xmind.ui.map.unbalanced</structure>
	</item>
</root>
