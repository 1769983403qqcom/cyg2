<?xml version="1.0" encoding="utf8"?>
<root>
	<item type="dict">
		<title type="str">画布 1</title>
		<topic type="dict">
			<title type="str">通用</title>
			<topics type="list">
				<item type="dict">
					<title type="str">性能对比</title>
					<topics type="list">
						<item type="dict">
							<title type="str">cpu  1s</title>
						</item>
						<item type="dict">
							<title type="str">一级缓存 1.3s</title>
							<topics type="list">
								<item type="dict">
									<title type="str">子主题 1</title>
								</item>
							</topics>
						</item>
						<item type="dict">
							<title type="str">二级缓存 20s</title>
						</item>
						<item type="dict">
							<title type="str">互斥锁 60s</title>
						</item>
						<item type="dict">
							<title type="str">内存寻址 300s</title>
						</item>
						<item type="dict">
							<title type="str">系统调用3600 s</title>
						</item>
						<item type="dict">
							<title type="str">网络传输(1G 带宽2k) 14 小时</title>
						</item>
						<item type="dict">
							<title type="str">ssd随机读取 144小时</title>
						</item>
						<item type="dict">
							<title type="str">服务器间通讯 15天(两周)</title>
						</item>
						<item type="dict">
							<title type="str">SSD读取1M 用4周</title>
						</item>
						<item type="dict">
							<title type="str">普通磁盘寻址  40周</title>
						</item>
						<item type="dict">
							<title type="str">磁盘连续读取1M   20个月</title>
						</item>
						<item type="dict">
							<title type="str">跨机房调用 40ms 以上()  40个月. </title>
						</item>
					</topics>
				</item>
				<item type="dict">
					<title type="str">如何优化高并发写</title>
					<topics type="list">
						<item type="dict">
							<title type="str">磁盘性能写入比较差</title>
							<topics type="list">
								<item type="dict">
									<title type="str">基于操作系统的页缓存来实现文件写入</title>
								</item>
								<item type="dict">
									<title type="str">数据追加到文件的末尾,避免随机写</title>
								</item>
								<item type="dict">
									<title type="str">双缓冲机制</title>
									<topics type="list">
										<item type="dict">
											<title type="str">开辟两块内存空间</title>
										</item>
										<item type="dict">
											<title type="str">步骤</title>
											<topics type="list">
												<item type="dict">
													<title type="str">核心数据进来全部写第一块缓冲区</title>
												</item>
												<item type="dict">
													<title type="str">写满了之后，由一个线程进行那块缓冲区的数据批量刷到磁盘文件的工作</title>
												</item>
												<item type="dict">
													<title type="str">其他线程同时可以继续写另外一块缓冲区</title>
												</item>
											</topics>
										</item>
										<item type="dict">
											<title type="str">内存数据写入的锁机制以及串行化问题</title>
											<topics type="list">
												<item type="dict">
													<title type="str">并发修改问题</title>
												</item>
												<item type="dict">
													<title type="str">分段加锁机制</title>
												</item>
												<item type="dict">
													<title type="str">刷新线程 单独线程池</title>
												</item>
											</topics>
										</item>
									</topics>
								</item>
							</topics>
						</item>
						<item type="dict">
							<title type="str">零拷贝技术</title>
							<topics type="list">
								<item type="dict">
									<title type="str">频繁的从磁盘读数据然后发给socket消费者，性能瓶颈在哪里</title>
								</item>
								<item type="dict">
									<title type="str">磁盘到 OS cache ,再发到网卡里, 两次 DMA , 不涉及 CPU拷贝</title>
								</item>
							</topics>
						</item>
						<item type="dict">
							<title type="str">分片</title>
							<topics type="list">
								<item type="dict">
									<title type="str">CAS优化</title>
									<topics type="list">
										<item type="dict">
											<title type="str">经典 CAS操作不断对一个 base 进行cas +1 ,在并发高时,导致线程空轮训增加</title>
										</item>
										<item type="dict">
											<title type="str">分片case ,避免多个线程同时对一个 value 进行 cas+1, 而是采用分段机制, 设置一个 base及多个cell, 多线程下分别对 cell 递增, 这样降低了 cas 失败概率, 最后使用 sum求和得到 value</title>
										</item>
										<item type="dict">
											<title type="str">自动分段迁移</title>
											<topics type="list">
												<item type="dict">
													<title type="str">一个 cell的 cas 更新失败,自动迁移到另一个cell</title>
												</item>
											</topics>
										</item>
									</topics>
								</item>
								<item type="dict">
									<title type="str">库存系统分段.</title>
									<topics type="list">
										<item type="dict">
											<title type="str">避免多个客户端同时对同一个记录进行修改</title>
										</item>
									</topics>
								</item>
							</topics>
						</item>
					</topics>
				</item>
				<item type="dict">
					<title type="str">系统优化万金油</title>
					<topics type="list">
						<item type="dict">
							<title type="str">Cache：缓存，万金油，哪里不行优先考虑
Queue：消息队列，常见使用Linkedin的kafka
Asynchronized：批处理＋异步，减少系统IO瓶颈
Load Balance: 负载均衡，可以使用一致性hash技术做到尽量少的数据迁移
Parallelization：并行计算，比如MapReduce
Replication：提高可靠性，如HDFS，基于位置感知的多块拷贝Partition：
数据库sharding，通过hash取摸</title>
						</item>
					</topics>
				</item>
				<item type="dict">
					<title type="str">思考</title>
					<topics type="list">
						<item type="dict">
							<title type="str">何谓标准</title>
							<topics type="list">
								<item type="dict">
									<title type="str">标准本身在于对外公开, 引导更多的人遵守规范</title>
								</item>
							</topics>
						</item>
					</topics>
				</item>
				<item type="dict">
					<title type="str">缓冲和缓存</title>
					<topics type="list">
						<item type="dict">
							<title type="str">任何缓冲都会存在最基本的修改单元,对于流的缓冲,例如管道, 文件输出流, 最小的单位是字节. 但是对于修改已经存在的数据, 尤其是结构化的数据, 有具体的组织方式的数据, 最小的缓冲单元 绝对不是字节, 因为无法控制一个个字节 的写会磁盘.  一般都按照最小的存储单元, 例如操作系统page cache 是按照操作系统页大小组织4k, 而mysql 也存在这种组织方式, 也是按照页, 这个页直接存储具体的行记录, 每次刷新都是刷新这个页. 而不是页中的某个具体的字节.</title>
						</item>
					</topics>
				</item>
				<item type="dict">
					<title type="str">数据如何冗余备份?一致性和冗余如何抉择?</title>
				</item>
				<item type="dict">
					<title type="str">如何进行集群管理,保证集群高可用?如何主从切换,选主?如何避免脑裂</title>
				</item>
			</topics>
		</topic>
		<structure type="str">org.xmind.ui.map.unbalanced</structure>
	</item>
</root>
